//
// $Revision: 2.7 $
// $Date: 2011/04/11 03:56:48 $
//
// page.inc
//
// Functions to be used on every page.  Documentation shown above function (and available in compilation).
//
//
// ****************************************************************************
//
// Database Functions
//
// 
// 
// function: dbshowerror($connection, $die) - show database error
//  $connection = mysql connection context
//  $die = if text flag set to "die", process terminates with this error 
//
//  Displays database error using showerror as the display mechanism.
//
// function: dbsetup()  - database start
//  Returns: $connection MySQL handle
//
//  Sets up single connection for database interaction.  $connection is returned.
//
//
// function: dblock($dblock, $op) - controls locks on rows: locks, checks for lock or abandons lock
//   $dblock array can be configured two ways:
//      1) An associative array that consists of two values:
//   	    table - table name in which to place lock
//          where - where clause to identify correct row(s)
//      2) An array of associative arrays that consist of the two values above.  In this case
//           the routine performs dblock function for each table/where clause in the array
//    $op - operation: "lock", "check", "abandon"
//      "lock" - lock the row with the current $user
//      "check" - check that the $user still holds a lock 
//      "abandon" - abandon or release the lock
//	"changedby" - update field 'updatedby' in the given table
//
// Implements poor-man's row-locking.  This single function performs all operations, via the $op directive.
//  Function looks for locked column and if locked column exists, 
//
//  Can also be used with a "dblockshowedit" function, which will query for a lock and either show a "steal" page
//   or display Save and Cancel buttons.
//
// Note: Can't seem to find a mysqli describe function to test if the column is there
//
//
//
// function: dblockshowedit($edit, $dblock, $urlroot)
//   $edit - flag is non-zero if editing
//   $dblock array can be configured two ways:
//      1) An associative array that consists of two values:
//   	    table - table name in which to place lock
//          where - where clause to identify correct row(s)
//      2) An array of associative arrays that consist of the two values above.  In this case
//           the routine performs dblock function for each table/where clause in the array
//   $urlroot - urlroot to connect to edit link (or override link)
//
//  Returns: string to display to user
//
// If in edit mode, show edit options.  If not in edit mode, check for lock and 
//   show editability to user
//
//
// function: showupdatedby($dblock)
// 
// if the user is an admin return a string of hwo has updated the table
// 	defined by the dblock paramaters (look above)
// $dblock is an array with keys of "table" and "where" that define what table is being accessed
//
//
// ****************************************************************************
//
// Page display functions
//
// 
// function: showerror($text)
//  $text - text to show as error message
//
//  Displays error in red to the user.  Instructs user to use BACK button, and provides a link to the home page.
// 
//
// function: pheader
//  $title - title to appear in html title
//  $titleonly = text flag that makes the title only visible in the title bar when set to "titleonly"
//      May be DEPRICATED
//  $options
//    - array of options
//    - openhead - leave head open  
//
//  Intended to be called from every page.  Sets up $user, starts HTML document.
//
//   set up HTML header with title and header properties
//   set H2 title in page as header info
//
//
// function: pfooter()
//
//   set up HTML footer, close db connection and commit trasactions
//
//
// function: teamhref($teamnum)
//  $teamnum - number of team
//  
// Returns: href text to teaminfo page
//
// convenience function to return team <a href BLAH> on to teaminfo page.  
//  Does not supply the closing </a>.
// 
//
//
// function: tabtextfield($edit, $options, $data, $fieldname, $fieldtag, $size, $maxlenth, $value)
//  $edit - edit flag, 1 if editing
//  $options - options to add (see below)
//  $data - dataarray with associative element named fieldname
//  $fieldname - name of field (in associative element, in forms, etc.
//  $fieldtag - tag to display by field.  if "DisplayField", display field translation is referenced
//  $size - size of editing text box
//  $maxlength - max length of input allowed
//  $defvalue - value to place in text box if in editing mode.  Otherwise this value comes from $data
//       ---- Not implemented yet
//
// Displays for reading or for edit in two <td> boxes.  Intended as a generic method to layout boxes
//  within layout tables.
//
// Options in options array:
//  ["tr"] = TRUE - add beginning and ending <tr> tags
//  ["notag="] = TRUE - do not print field label/tag.  Just the field itself
//  ["notd"] = TRUE - do not print <td> open and close
//  ["href"] = TRUE - enclose data value in href tag
//   
//
//
// function: tabtextarea ($edit, $options, $data, $fieldname, $fieldtag, $row, $col, $value )
//  $edit - edit flag, 1 if editing
//  $options - options to add (see below)
//  $data - dataarray with associative element named fieldname
//  $fieldname - name of field (in associative element, in forms, etc.
//  $fieldtag - tag to display by field.  if "DisplayField", display field translation is referenced
//  $row - rows of text box when editing
//  $col - cols of text box when editing
//  $defvalue - value to place in text box if in editing mode.  Otherwise this value comes from $data
//       ---- Not implemented yet
//
// Similar to tabtextfield, lays out display or edit box
//
// Options in options array:
//  ["tr"] = TRUE - add beginning and ending <tr> tags
//  ["notd"] = TRUE - don't use <td> tags to seperate values
//  ["notag="] = TRUE - do not print field label/tag.  Just the field itself
//   
//
//
// function: texttfield ($fieldtag, $fieldname, $size, $maxlength, $value )
//   $fieldtag - user-displayed tag in front of field
//   $fieldname - name used for variables and db field
//   $size - size of edit text box
//   $maxlength - maximum length of input allowed
//   $value - value placed in field
//
//
// fucntion: hiddenfield ( $fieldname, $value )
//   $fieldname - name used for variables and db field
//   $value - value placed in field
//
//  Used to place a hidden field within a fox.
//
//
// alliancefield ($color)
//   $color - (Red / Blue) designating color of alliance
//
//  paints 3 text boxes for fields
//  
//
//
// ****************************************************************************
//
// fields functions
//
//
//
// function: fields_load: ($post, $fieldnames)
//  loads fields names from post operation
//   $post = text value for get or post
//   $fieldnames = array of field names assumed to match html form names
//
// Loads fieldnames from $GET or $POST.  If $post is set to "post", uses a $post variable.
//
//
// function: ( $operation, $formfields, $fieldnames )
//  fields_insert: create insert string
//  $operation - name, value, where
//        nameonly or fieldname - name of fields, comma separated
//        insert - values used in SQL insert statement
//        where - where-clear name=value, comma separated
//  $formfields - array created in loadfields of each field
//  $fieldnames - optional array of field names to be inserted
//
//   Returns string for insertion into SQL statement.
//
//  Creates strings for insertion into SQL statements.  Strings include column names (fieldname or nameonly),
//   insert values ('value','value'...), or update/where statements (field='value')
//
//
//
//
// ****************************************************************************
//
// parameters handling functions
//
//    functions that use and manipulate the configurable variables set up 
//     in params.inc
//
//
// 
// function: param_array ($paramgroup)
//  creates array of needed form fields
//   $paramgroup - group name for paramters (Play, Pit, Match, etc.)
//   Retuns an array of valid fieldnames
//
//
//
// function: tabparamfields($edit, $options, $data, $paramgroup);
//   $edit - edit option
//   $options - identical to tabtextfield options (passed to tabtextfield)
//      Addtional options for this function:
//         pagebreak = if non-zero (set), break page for these number of columns (2 or more)
//         pagebreakstring = string inserted to cause pagebreak.  Works
//           in tandem with pagebreak
//   $data - data row with field params (similar to tabtextfield)
//   $paramgroup - group name for paramters (Play, Pit, Match, etc.)
//
//   Displays param fields in a table form, similar to texttabfield.  Displays all param fields
//    in a paramgroup
//
//
//
// function: tabparamfields($operation, $formfields, $paramgroup)
//  display/edit parameterized fields
//
//  NOTE: operands similar to fields_insert
//  $operation - name, value, where
//        nameonly or fieldname - name of fields, comma separated
//        insert - values used in SQL insert statement
//        where - where-clear name=value, comma separated
//  $formfields - array created in loadfields of each field
//   $paramgroup - group name for paramters (Play, Pit, Match, etc.)
//
//   Adds SQL statement fields to SQL statements, similar to fields_insert.
//   Creates strings for insertion into SQL statements.  Strings include column names (fieldname or nameonly),
//   insert values ('value','value'...), or update/where statements (field='value')
//
//
// function: param_load ($post, $paramgroup)
//  loads paramterized fields names from post operation
//   $post = text value for get or post
//   $paramgroup - group name for paramters (Play, Pit, Match, etc.)
//
//  Loads parameter fields from $GET or $POST vars.
//
//
// function:param_report ($data, $paramgroup, $public))
//   $data - array or field=>value row arrays (multiple teams)
//   $paramgroup - group name for paramters (Play, Pit, Match, etc.)
//   $public - if set to 1 then only print competitive info
//   $teamcnt - count of total teams in paramter report
//
//   Returns a string of table rows
//
// Builds team comparison rows
// 
//
//
// ****************************************************************************
//
// teams functions
//
//
// function: alliances_load ($post)
//  $post = value or get or post
// assumes team_color_cnt format on variable -- loads into teams arrays
//
// 
// function: teams_validate ( $teams )
//  $teams - array of teams loaded in alliances_load
//
//  Returns: FALSE if a team doesn't exist and shows error for each team.
//
//  Validates each team in array exists in teambot table.
//
//
// ****************************************************************************
//
// end of page.inc -- do not leave any lines under the end of this closure
